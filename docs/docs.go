// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs
// "host": "ec2-user@ec2-44-202-36-198.compute-1.amazonaws.com:5000",
    // "host": "localhost:5000",
//    "host": "http://54.184.142.75:5000",
// 54.89.250.75
// 54.89.250.75
// 54.89.250.75
import "github.com/swaggo/swag"

const docTemplate = 
`
{
    "swagger": "2.0",
    "info": {
      "title": "Dancer API",
      "description": "Authentication token should start with Bearer [space] token || example > Bearer eyJhbGciOiJIUzI1NiIsInR5.....",
      "version": "1.0.0"
    },
    "host": "http://44.201.87.128:5000",
    "basePath": "/",
    "schemes": [
      "http",
    ],
    "securityDefinitions": {
        "Bearer": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header"
        }
      },
   
    
    
    


      
      "paths": {
        "/api/user/manual-signup": {
          "post": {
            "tags": [
              "Auth / Manula signup"
            ],
            "summary": "manual signup",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "firstName": "Ahmed",
                    "lastName": "Khalaf",
                    "dateOfBirth": "15-8-1996",
                    "email": "ahmed@ahmed.com",
                    "password": "ahmed5747723"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't crate Now User"
              }
            }
          }
        },
        "/api/user/manual-signin": {
          "post": {
            "tags": [
              "Auth / Manula login"
            ],
            "summary": "manual login",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "email": "ahmed@ahmed.com",
                    "password": "ahmed5747723"
                  }
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid input"
              },
              "405": {
                "description": "Invalid input"
              },
              "404": {
                  "description": "Invalid User With Given Email"
                },
              "302": {
                "description": "given Password is not correct !"
              },
              "500": {
                "description": "Server Error could not login"
              }
            }
          }
        },
        "/api/user/social-Google-Apple-Facebook": {
          "post": {
            "tags": [
              "Auth /Social login & Register"
            ],
            "summary": "Social login & Register",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "email": "jack@jack.com",
                    "firstName": "jack",
                    "lastName": "Dom",
                    "token": "tokendataExample || NOT Requerd"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't login "
              }
            }
          }
        },
        "/api/user/Auth-Phone-Number": {
          "post": {
            "tags": [
              "Auth / Phone Number login & Register"
            ],
            "summary": "PhoneNumber login & Register",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "phoneNumber": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "phoneNumber": "01278592995",
                    "firstName": "sara",
                    "lastName": "belosy",
                    "password": "sara55555"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't login "
              }
            }
          }
        },
        "/api/user/UpdateInfo/{id}": {
          "patch": {
            "security": [
              {
                "Bearer": []
              }
            ],
            "tags": [
              "Updated User Data"
            ],
            "summary": "Update user data",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path"
              },
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstname": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "phoneNumber": {
                      "type": "string"
                    },
                    "statusOfUser": {
                      "type": "string"
                    },
                    "userProfilePhoto": {
                      "type": "string"
                    },
                    "userHeight": "33",
                    "Gender": {
                      "type": "string"
                    },
                    "orientation": {
                      "type": "string"
                    },
                    "userRelationship": {
                      "type": "string"
                    },
                    "userLookFor": {
                      "type": "string"
                    },
                    "userRole": {
                      "type": "string"
                    },
                    "school": {
                      "type": "string"
                    },
                    "placeOfJob": {
                      "type": "string"
                    },
                    "jobTitle": {
                      "type": "string"
                    },
                    "userCurrentMood": {
                      "type": "string"
                    },
                    "userMediaPhoto": {
                      "type": "array"
                    },
                    "userMediaVideo": {
                      "type": "array"
                    },
                    "userLocation": {
                      "type": "array"
                    },
                    "locationDetails": {
                      "type": "array"
                    },
                    "userLanguages": {
                      "type": "array"
                    },
                    "userHobbyes": {
                      "type": "array"
                    },
                    "userZodlac": {
                      "type": "array"
                    },
                    "userPets": {
                      "type": "array"
                    },
                    "isUserSmoking": {
                      "type": "boolean"
                    },
                    "physlcalAttraction": {
                      "type": "array"
                    },
                    "userTurnON": {
                      "type": "array"
                    },
                    "userStyle": {
                      "type": "array"
                    },
                    "userBody": {
                      "type": "array"
                    },
                    "userSesson": {
                      "type": "array"
                    },
                    "userMovies": {
                      "type": "array"
                    },
                    "userDrink": {
                      "type": "array"
                    }
                  },
                  "example": {
                    "firstname": "Ahmed ",
                    "firstName": "Updated Ahmed",
                    "dateOfBirth": "7-4-9988",
                    "phoneNumber": "testing..any data",
                    "statusOfUser": "testing..any data",
                    "userProfilePhoto": "testing..any data",
                    "userHeight": "33",
                    "Gender": "testing..any data",
                    "orientation": "testing..any data",
                    "userRelationship": "testing..any data",
                    "userLookFor": "testing..any data",
                    "userRole": "testing..any data",
                    "school": "testing..any data",
                    "placeOfJob": "testing..any data",
                    "jobTitle": "testing..any data",
                    "userCurrentMood": "testing..any data",
                    "userMediaVideo": [
                      "first media"
                    ],
                    "userLocation": [
                      "country",
                      "USA",
                      "city",
                      "NYC"
                    ],
                    "locationDetails":["-73.9667, 40.78"],
                    "userLanguages": [
                      "test"
                    ],
                    "userHobbyes": [
                      "test"
                    ],
                    "userZodlac": [
                      "test"
                    ],
                    "userPets": [
                      "test"
                    ],
                    "isUserSmoking":false,
                    "physlcalAttraction": [
                      "test"
                    ],
                    "userTurnON": [
                      "test"
                    ],
                    "userStyle": [
                      "test"
                    ],
                    "userBody": [
                      "test"
                    ],
                    "userSesson": [
                      "test"
                    ],
                    "userMovies": [
                      "test"
                    ],
                    "userDrink": [
                      "test"
                    ]
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't Update Userdata "
              }
            }
          }
        },
        "/api/user/Suggested/{id}": {
          "get": {
            "tags": [
              "Updated User Data"
            ],
            "summary": "Update user data",
            "description": "",
            "operationId": "getusersug",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Pet object that needs to be added to the store"
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't Update Userdata "
              }
            }
          }
        },
        "/api/user/UpdateSug/{mid}/LikeOrHate/{nid}": {
          "patch": {
            "tags": [
              "Update suggested List user Add like or dis like The Suggested User"
            ],
            "summary": "Will Return  Another Partner From the List",
            "description": "Suggested User By default is aleady taken true as LoveOrHate faild at the db You Need just to send the user id and the suggested user id and by default will return the opposite of value",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "mid",
                "in":"path"
              },
              {
                "name": "nid",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/message/{FuserID}/{SuserID}": {
          "get": {
            "tags": [
              "Get Private Room Unique id"
            ],
            "summary": "Will Return  Another Partner From the List",
            "description": "Suggested User By default is aleady taken true as LoveOrHate faild at the db You Need just to send the user id and the suggested user id and by default will return the opposite of value",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "FuserID",
                "in":"path"
              },
              {
                "name": "SuserID",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/message": {
          "post": {
            "tags": [
              "Send Message"
            ],
            "summary": "Will Return  Another Partner From the List",
            "description": "Suggested User By default is aleady taken true as LoveOrHate faild at the db You Need just to send the user id and the suggested user id and by default will return the opposite of value",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "messageType":{
                      "type":"array"
                    },
                    "sender":{
                     "type":"string"
                    },
                    "received":{
                    "type":"string"
                    },
                  },
                  "example": {
                    "message": "Hi How Are You",
                    "messageType":["stringMessage"],
                    "sender":"637331d35d9d5bd2af78e876",
                    "received":"637332245d9d5bd2af78e877",
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/message/GetMessages/{roomId}/{userId}": {
          "post": {
            "tags": [
              "Get Private Room list from From Specific Chat index Or Number"
            ],
            "summary": "Will Return  nmber of messages ",
            "description": " Will return number of messages depening on default number of returnned messages and passed index number at the body",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              },
              {
                "name": "userId",
                "in": "path"
              }, {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "From": {
                      "type": "number"
                    },
                  },
                  "example": {
                    "From": 1
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/message/TestMessage": {
          "get": {
            "tags": [
              "Test Message"
            ],
            "summary": "Will Return  Done",
            "description": " Will return done as massage",
            "produces": [
              "application/json"
            ],
            "parameters": [],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/GroupMessage/{GroupName}/{CreatorID}": {
          "post": {
            "tags": [
              "Group"
            ],
            "summary": "Will Return the Group room id and if not found It will create new one",
            "description": " Will return roomid",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "GroupName",
                "in":"path"
              },
              {
                "name": "CreatorID",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/SendMessageToGroup/{GroupID}/{SenerId}": {
          "post": {
            "tags": [
              "Group"
            ],
            "summary": "summary send massage to the group ",
            "description": "disc send message to the group",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "GroupID",
                "in":"path"
              },
              {
                "name": "SenerId",
                "in": "path"
              },
              {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "messageType":{
                      "type":"array"
                    },
                    "sender":{
                     "type":"string"
                    },
                  },
                  "example": {
                    "message": "Hi How Are You",
                    "messageType":["stringMessage"],
                    "sender":"637331d35d9d5bd2af78e876",
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/GetGroupMessageByNumbers/{roomId}/{userId}": {
          "post": {
            "tags": [
              "Group"
            ],
            "summary": "Will Return  nmber of messages ",
            "description": " Will return number of messages depening on default number of returnned messages and passed index number at the body",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              }, 
              {
                "name": "userId",
                "in":"path"
              },
              {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "From": {
                      "type": "number"
                    },
                  },
                  "example": {
                    "From": 1
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/AddNewUserToGroup/{roomId}/{JoinUserId}": {
          "post": {
            "security": [
              {
                "Bearer": []
              }
            ],
            "tags": [
              "Group"
            ],
            "summary": "Will add new member to the group",
            "description": "Will add new member to the group",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              }, 
              {
                "name": "JoinUserId",
                "in":"path"
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/RemoveMemberFromchatGroup/{roomId}/{JoinUserId}": {
          "delete": {
            "security": [
              {
                "Bearer": []
              }
            ],
            "tags": [
              "Group"
            ],
            "summary": "will remove member from the group | Remover should be the creator of the Group",
            "description": " will remove member from the group | Remover should be the creator of the Group",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              }, 
              {
                "name": "JoinUserId",
                "in":"path"
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/AddStory/{userId}": {
          "post": {
            "tags": [
              "Story"
            ],
            "summary": "Will Return  Created Story Or Added Story ",
            "description": "you can add video or image to added as story and it will Auto deleted after 24 Hour",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "it can be image Or Vedio",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "storyData": {
                      "type": "string"
                    },
                    "isTypeVideo":{
                      "type": "boolean"
                    },
                    "storyCaption":{
                      "type":"array"
                    },
                  },
                  "example": {
                    "storyData": "some meta data base64/5678ojhyu90iuyttyuiiuygfdtyui",
                    "isTypeVideo":false,
                    "storyCaption":"it's Nice day",
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/GetStoryes/{userId}": {
          "get": {
            "tags": [
              "Story"
            ],
            "summary": "Will Return  User Storyes ",
            "description": "Storyes will Auto deleted after 24 Hour",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/RemoveStory/{userId}/{StoryNumber}": {
          "delete": {
            "tags": [
              "Story"
            ],
            "summary": "Will Delete One Story  ",
            "description": "Storyes will Auto deleted after 24 Hour From The Created time",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path",
                "required": true,
  
              }, 
              {
                "name":"StoryNumber",
                "in":"path",
                "required": true,
  
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
  
        
  
      }

  
  
  
  
  
  
    }
  `
  
  // SwaggerInfo holds exported Swagger Info so clients can modify it
  var SwaggerInfo = &swag.Spec{
    Version:          "",
    Host:             "",
    BasePath:         "",
    Schemes:          []string{},
    Title:            "",
    Description:      "",
    InfoInstanceName: "swagger",
    SwaggerTemplate:  docTemplate,
  }
  
  func init() {
    swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
  }
  